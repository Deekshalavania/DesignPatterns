import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import com.epam.java.HomeTask1.ButterToast;
import com.epam.java.HomeTask1.CalculateTotalCost;
import com.epam.java.HomeTask1.ChocolateBarfi;
import com.epam.java.HomeTask1.KajuKatli;
import com.epam.java.HomeTask1.SortSweets;
import com.epam.java.HomeTask1.Sponge;
import com.epam.java.HomeTask1.Sweet;

import junit.framework.Assert;

public class RunnerHomeTask1 {
	public static ArrayList<Sweet> list = new ArrayList<Sweet>();

	//public static void main(String[] args) {
		double total;
		@Before
		public void setup() {
		double total;
		list.add(new ButterToast("ButterToast", "Toast", 99, 29.58));
		list.add(new ChocolateBarfi("ChocolateBarfi", "Chocolate", 155, 44.32));
		list.add(new KajuKatli("KajuKatli", "Katli",200, 201.21));
		list.add(new Sponge("Sponge", "Bengal Sweet", 995, 71.12));
		}
		
		@Test
		public void CheckForButterToastCost() {
		Sweet s=(Sweet) list.get(0);
		double expected=s.getsweetCost();	
		Assert.assertEquals(200.0,expected);
		list.get(0);
		}
		
		@Test
		public void CheckForKajuKatliCost() {
			Sweet s=(Sweet) list.get(2);
			double expected=s.getsweetCost();	
			System.out.println("EXPECTEDDDDDD ISSS"+expected);
			Assert.assertEquals(578.97,expected);
			}
		@Test
		public void CheckTotalCostForValidValue()
		{

			total=CalculateTotalCost.totalCost(list);
			Assert.assertEquals(1877.697, total);
		}
		@Test
		public void CheckTotalCostForInValidValue()
		{

			total=CalculateTotalCost.totalCost(list);
			Assert.assertNotSame(7676, total);
		}
		
		@Test
		public void TestSortingOrder()
		{
			SortSweets.sortingSweets(list);
			//Assert.assertEquals(false, false);
		}
}
